#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# Train And Test Model Against Data

This notebook will leverage ML.NET's implementation of AutoAI to determine the best model to fit against our code analysis data.

#!markdown

Install Nuget Packages

#!csharp

#r "nuget:Microsoft.ML.AutoML"

#!markdown

Import References

#!csharp

using System.IO;
using System.Collections.Generic;
using System.Runtime;
using Microsoft.ML;
using Microsoft.ML.Data;

#!markdown

Import Our Filepaths For This Project

#!csharp

#!import Configuration/FilePaths.dib

#!markdown

Infer Our Columnar Data

#!csharp

// Initialize MLContext
MLContext ctx = new MLContext();

// Define data path
var dataPath = Path.GetFullPath(PathToClassMetricsFile);

// Infer column information
ColumnInferenceResults columnInference =
    ctx.Auto().InferColumns(dataPath, labelColumnName: "HasSmell", groupColumns: false);

#!markdown

Load Our Inferred Data

#!csharp

// Create text loader
TextLoader loader = ctx.Data.CreateTextLoader(columnInference.TextLoaderOptions);

// Load data into IDataView
IDataView data = loader.Load(dataPath);

#!markdown

Train Against A Fraction Of Our Data

#!csharp

DataOperationsCatalog.TrainTestData trainValidationData = ctx.Data.TrainTestSplit(data, testFraction: 0.2);

#!markdown

Define Our Pipeline

#!csharp

SweepablePipeline pipeline =
    ctx.Auto().Featurizer(data, columnInformation: columnInference.ColumnInformation)
        .Append(ctx.Auto().BinaryClassification(labelColumnName: columnInference.ColumnInformation.LabelColumnName));

#!markdown

## Configuring Our ML Experiment

This is where we use AutoAI on our model to determine the best algorithm available to train with.

#!markdown

Create the experiment.

#!csharp

AutoMLExperiment experiment = ctx.Auto().CreateExperiment();

#!markdown

Configure the experiment

#!csharp

experiment
    .SetPipeline(pipeline)
    .SetBinaryClassificationMetric(BinaryClassificationMetric.Accuracy, columnInference.ColumnInformation.LabelColumnName)
    .SetTrainingTimeInSeconds(60)
    .SetDataset(trainValidationData);

#!markdown

Add a destination for the trainer's logs to output to.

#!csharp

// Log experiment trials
ctx.Log += (_, e) => {
    if (e.Source.Equals("AutoMLExperiment"))
    {
        Console.WriteLine(e.RawMessage);
    }
};

#!markdown

Run the experiment

#!csharp

TrialResult experimentResults = await experiment.RunAsync();

#!markdown

Save Trained Model

#!csharp

ctx.Model.Save(experimentResults.Model, loader, PathToTrainedModelFile);

#!markdown

## Test Our Model

#!csharp

MLContext mlContext = new MLContext();

// Load the trained model
DataViewSchema predictionPipelineSchema;

ITransformer predictionPipeline = mlContext.Model.Load(PathToTrainedModelFile, out predictionPipelineSchema);

#!csharp

IDataView predictions = predictionPipeline.Transform(trainValidationData.TestSet);

#!csharp

// Define StochasticDualCoordinateAscent algorithm estimator
IEstimator<ITransformer> sdcaEstimator = mlContext.Regression.Trainers.Sdca();

var crossValidationResults = mlContext.BinaryClassification.CrossValidate(predictions, sdcaEstimator, numberOfFolds: 5);
