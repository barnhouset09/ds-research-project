#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# Perform Data Analysis
This notebook leverages some of .NET's data analysis libraries to explore the DACOS dataset.

The goals of this exploration are to:
- Describe the structure of the dataset
- Visualize the distribution of the data used for training
- Explain any problems found while processing the data

#!markdown

## Import References

#!markdown

Install NuGet packages

#!csharp

#r "nuget:SandDance.InteractiveExtension,*-*"
#r "nuget:DataView.InteractiveExtension,*-*"
#r "nuget:Microsoft.ML.DataView"
#r "nuget:Microsoft.Data.Analysis"
#r "nuget: DuckDB.NET.Data.Full, *-*"

#!markdown

Import References

#!csharp

using System.IO;
using System.Collections.Generic;
using Microsoft.Data.Analysis;
using Microsoft.ML;
using System.Runtime;
using DuckDB.NET.Data;

#!csharp

#!import Configuration/FilePaths.dib

#!markdown

Connect To Our DuckDB Instance

#!csharp

// Open connection to our duckdb database.
// This creates a new .duckdb file.
var duckDbConnection = new DuckDBConnection($"Data Source={PathToDuckDbFile}");
duckDbConnection.Open();

var command = duckDbConnection.CreateCommand();

#!markdown

Read our class metrics data from the database and copy them into a csv file

#!csharp

// Define the query.
command.CommandText = @$"
COPY (
    SELECT
        s.Id                as SampleId,
        s.has_smell         as HasSmell,
        a.iscm              as HasComplexMethod,
        a.islp              as HasLongParameterList,
        a.isma              as HasMultifacetedAbstraction,
        cm.dit              as DepthOfInheritance,
        cm.fanin            as FanIn,
        cm.fanout           as FanOut,
        cm.lcom             as LackOfCohesionInMethods,
        cm.loc              as LinesOfCode,
        cm.nc               as NumberOfClasses,
        cm.nof              as NumberOfFields,
        cm.nom              as NumberOfMethods,
        cm.nopf             as NumberOfPublicFields,
        cm.nopm             as NumberOfPublicMethods,
        cm.wmc              as WeightedMethodsPerClass,
        cm.project_name     as ProjectName,
        cm.package_name     as PackageName,
        cm.type_name        as TypeName,
        'Java'              as ProgrammingLanguage
    FROM 
        class_metrics cm
            JOIN sample s ON 
                cm.id = s.designite_id
            LEFT JOIN annotation a ON
                a.sample_id = s.id
    WHERE
        s.is_class = true
)
TO
    '{PathToClassMetricsFile}'
    (
        HEADER,
        DELIMITER ','
    )
;";

// Execute the query
var reader = command.ExecuteReader();

#!markdown

Query for our collected method metrics and copy them to a csv file

#!csharp

// Define the query.
command.CommandText = @$"
COPY (
    SELECT
        s.Id                as SampleId,
        s.has_smell         as HasSmell,
        a.iscm              as HasComplexMethod,
        a.islp              as HasLongParameterList,
        a.isma              as HasMultifacetedAbstraction,
        mm.cc               as CyclomaticComplexity,
        mm.loc              as LinesOfCode,
        mm.pc               as PathCount,
        mm.project_name     as ProjectName,
        mm.package_name     as PackageName,
        mm.type_name        as TypeName,
        mm.method_name      as MethodName,
        'Java'              as ProgrammingLanguage
    FROM 
        method_metrics mm
            JOIN sample s ON 
                mm.id = s.designite_id
            LEFT JOIN annotation a ON
                a.sample_id = s.id
    WHERE
        s.is_class = false
)
TO
    '{PathToMethodMetricsFile}'
    (
        HEADER,
        DELIMITER ','
    )
;";

// Execute the query
reader = command.ExecuteReader();

#!markdown

Load our results into a dataframe for viewing

#!csharp

var classMetricsDf = DataFrame.LoadCsv(PathToClassMetricsFile);
var methodMetricsDf = DataFrame.LoadCsv(PathToMethodMetricsFile);

#!markdown

#### Class Metrics Overview

#!csharp

int trueCount = 0;
int falseCount = 0;

// Get the specific column
PrimitiveDataFrameColumn<bool> hasSmellColumn = classMetricsDf.Columns["HasSmell"] as PrimitiveDataFrameColumn<bool>;

// Getting the count of true and false values
DataFrame valueCounts = hasSmellColumn.ValueCounts();

// Because ValueCounts method returns a DataFrame with counts,
// we can access the counts for true and false as follows:
// Count the number of true and false using LINQ
var trueClassHasSmellCount = hasSmellColumn.Count(value => value == true);
var falseClassHasSmellCount = hasSmellColumn.Count(value => value == false);

Console.WriteLine($"Classes with smells count: {trueClassHasSmellCount}, Classes without smells values: {falseClassHasSmellCount}");

#!csharp

classMetricsDf.Info().Display();

#!csharp

classMetricsDf.Description().Display()

#!markdown

#### Method Metrics Overview

#!csharp

// Get the specific column
PrimitiveDataFrameColumn<bool> hasSmellColumn = methodMetricsDf.Columns["HasSmell"] as PrimitiveDataFrameColumn<bool>;

// Getting the count of true and false values
DataFrame valueCounts = hasSmellColumn.ValueCounts();

// Because ValueCounts method returns a DataFrame with counts,
// we can access the counts for true and false as follows:
// Count the number of true and false using LINQ
var trueMethodHasSmellCount = hasSmellColumn.Count(value => value == true);
var falseMethodHasSmellCount = hasSmellColumn.Count(value => value == false);

Console.WriteLine($"Methods with smells count: {trueMethodHasSmellCount}, Methods without smells values: {falseMethodHasSmellCount}");

#!csharp

methodMetricsDf.Info().Display();

#!csharp

methodMetricsDf.Description().Display();

#!csharp

duckDbConnection.Close();
